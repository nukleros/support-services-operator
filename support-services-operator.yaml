apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: support-services-operator
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: support-services-operator
    control-plane: controller-manager
  name: support-services-operator-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.0
  creationTimestamp: null
  name: certmanagers.certificates.support-services.nukleros.io
spec:
  group: certificates.support-services.nukleros.io
  names:
    kind: CertManager
    listKind: CertManagerList
    plural: certmanagers
    singular: certmanager
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: CertManager is the Schema for the certmanagers API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: CertManagerSpec defines the desired state of CertManager.
            properties:
              cainjector:
                properties:
                  image:
                    default: quay.io/jetstack/cert-manager-cainjector
                    description: '(Default: "quay.io/jetstack/cert-manager-cainjector")
                      Image repo and name to use for cert-manager cainjector.'
                    type: string
                  replicas:
                    default: 2
                    description: '(Default: 2) Number of replicas to use for the cert-manager
                      cainjector deployment.'
                    type: integer
                type: object
              collection:
                description: Specifies a reference to the collection to use for this
                  workload. Requires the name and namespace input to find the collection.
                  If no collection field is set, default to selecting the only workload
                  collection in the cluster, which will result in an error if not
                  exactly one collection is found.
                properties:
                  name:
                    description: Required if specifying collection.  The name of the
                      collection within a specific collection.namespace to reference.
                    type: string
                  namespace:
                    description: '(Default: "") The namespace where the collection
                      exists.  Required only if the collection is namespace scoped
                      and not cluster scoped.'
                    type: string
                required:
                - name
                type: object
              contactEmail:
                description: Contact e-mail address for receiving updates about certificates
                  from LetsEncrypt.
                type: string
              controller:
                properties:
                  image:
                    default: quay.io/jetstack/cert-manager-controller
                    description: '(Default: "quay.io/jetstack/cert-manager-controller")
                      Image repo and name to use for cert-manager controller.'
                    type: string
                  replicas:
                    default: 2
                    description: '(Default: 2) Number of replicas to use for the cert-manager
                      controller deployment.'
                    type: integer
                type: object
              namespace:
                default: nukleros-certs-system
                description: '(Default: "nukleros-certs-system") Namespace to use
                  for certificate support services.'
                type: string
              version:
                default: v1.9.1
                description: '(Default: "v1.9.1") Version of cert-manager to use.'
                type: string
              webhook:
                properties:
                  image:
                    default: quay.io/jetstack/cert-manager-webhook
                    description: '(Default: "quay.io/jetstack/cert-manager-webhook")
                      Image repo and name to use for cert-manager webhook.'
                    type: string
                  replicas:
                    default: 2
                    description: '(Default: 2) Number of replicas to use for the cert-manager
                      webhook deployment.'
                    type: integer
                type: object
            type: object
          status:
            description: CertManagerStatus defines the observed state of CertManager.
            properties:
              conditions:
                items:
                  description: PhaseCondition describes an event that has occurred
                    during a phase of the controller reconciliation loop.
                  properties:
                    lastModified:
                      description: LastModified defines the time in which this component
                        was updated.
                      type: string
                    message:
                      description: Message defines a helpful message from the phase.
                      type: string
                    phase:
                      description: Phase defines the phase in which the condition
                        was set.
                      type: string
                    state:
                      description: PhaseState defines the current state of the phase.
                      enum:
                      - Complete
                      - Reconciling
                      - Failed
                      - Pending
                      type: string
                  required:
                  - lastModified
                  - message
                  - phase
                  - state
                  type: object
                type: array
              created:
                type: boolean
              dependenciesSatisfied:
                type: boolean
              resources:
                items:
                  description: ChildResource is the resource and its condition as
                    stored on the workload custom resource's status field.
                  properties:
                    condition:
                      description: ResourceCondition defines the current condition
                        of this resource.
                      properties:
                        created:
                          description: Created defines whether this object has been
                            successfully created or not.
                          type: boolean
                        lastModified:
                          description: LastModified defines the time in which this
                            resource was updated.
                          type: string
                        message:
                          description: Message defines a helpful message from the
                            resource phase.
                          type: string
                      required:
                      - created
                      type: object
                    group:
                      description: Group defines the API Group of the resource.
                      type: string
                    kind:
                      description: Kind defines the kind of the resource.
                      type: string
                    name:
                      description: Name defines the name of the resource from the
                        metadata.name field.
                      type: string
                    namespace:
                      description: Namespace defines the namespace in which this resource
                        exists in.
                      type: string
                    version:
                      description: Version defines the API Version of the resource.
                      type: string
                  required:
                  - group
                  - kind
                  - name
                  - namespace
                  - version
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.0
  creationTimestamp: null
  name: externaldns.gateway.support-services.nukleros.io
spec:
  group: gateway.support-services.nukleros.io
  names:
    kind: ExternalDNS
    listKind: ExternalDNSList
    plural: externaldns
    singular: externaldns
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ExternalDNS is the Schema for the externaldns API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ExternalDNSSpec defines the desired state of ExternalDNS.
            properties:
              collection:
                description: Specifies a reference to the collection to use for this
                  workload. Requires the name and namespace input to find the collection.
                  If no collection field is set, default to selecting the only workload
                  collection in the cluster, which will result in an error if not
                  exactly one collection is found.
                properties:
                  name:
                    description: Required if specifying collection.  The name of the
                      collection within a specific collection.namespace to reference.
                    type: string
                  namespace:
                    description: '(Default: "") The namespace where the collection
                      exists.  Required only if the collection is namespace scoped
                      and not cluster scoped.'
                    type: string
                required:
                - name
                type: object
              domainName:
                type: string
              iamRoleArn:
                description: On AWS, the IAM Role ARN that gives external-dns access
                  to Route53
                type: string
              image:
                default: k8s.gcr.io/external-dns/external-dns
                description: '(Default: "k8s.gcr.io/external-dns/external-dns") Image
                  repo and name to use for external-dns.'
                type: string
              namespace:
                default: nukleros-ingress-system
                description: '(Default: "nukleros-ingress-system") Namespace to use
                  for ingress support services.'
                type: string
              provider:
                default: none
                description: '(Default: "none") The DNS provider to use for setting
                  DNS records with external-dns.  One of: none | active-directory
                  | google | route53.'
                enum:
                - none
                - active-directory
                - google
                - route53
                type: string
              serviceAccountName:
                default: external-dns
                description: '(Default: "external-dns") The name of the external-dns
                  service account which is referenced in role policy doc for AWS.'
                type: string
              version:
                default: v0.12.2
                description: '(Default: "v0.12.2") Version of external-dns to use.'
                type: string
              zoneType:
                default: private
                description: '(Default: "private") Type of DNS hosted zone to manage.'
                enum:
                - private
                - public
                type: string
            type: object
          status:
            description: ExternalDNSStatus defines the observed state of ExternalDNS.
            properties:
              conditions:
                items:
                  description: PhaseCondition describes an event that has occurred
                    during a phase of the controller reconciliation loop.
                  properties:
                    lastModified:
                      description: LastModified defines the time in which this component
                        was updated.
                      type: string
                    message:
                      description: Message defines a helpful message from the phase.
                      type: string
                    phase:
                      description: Phase defines the phase in which the condition
                        was set.
                      type: string
                    state:
                      description: PhaseState defines the current state of the phase.
                      enum:
                      - Complete
                      - Reconciling
                      - Failed
                      - Pending
                      type: string
                  required:
                  - lastModified
                  - message
                  - phase
                  - state
                  type: object
                type: array
              created:
                type: boolean
              dependenciesSatisfied:
                type: boolean
              resources:
                items:
                  description: ChildResource is the resource and its condition as
                    stored on the workload custom resource's status field.
                  properties:
                    condition:
                      description: ResourceCondition defines the current condition
                        of this resource.
                      properties:
                        created:
                          description: Created defines whether this object has been
                            successfully created or not.
                          type: boolean
                        lastModified:
                          description: LastModified defines the time in which this
                            resource was updated.
                          type: string
                        message:
                          description: Message defines a helpful message from the
                            resource phase.
                          type: string
                      required:
                      - created
                      type: object
                    group:
                      description: Group defines the API Group of the resource.
                      type: string
                    kind:
                      description: Kind defines the kind of the resource.
                      type: string
                    name:
                      description: Name defines the name of the resource from the
                        metadata.name field.
                      type: string
                    namespace:
                      description: Namespace defines the namespace in which this resource
                        exists in.
                      type: string
                    version:
                      description: Version defines the API Version of the resource.
                      type: string
                  required:
                  - group
                  - kind
                  - name
                  - namespace
                  - version
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.0
  creationTimestamp: null
  name: glooedges.gateway.support-services.nukleros.io
spec:
  group: gateway.support-services.nukleros.io
  names:
    kind: GlooEdge
    listKind: GlooEdgeList
    plural: glooedges
    singular: glooedge
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: GlooEdge is the Schema for the glooedges API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: GlooEdgeSpec defines the desired state of GlooEdge.
            properties:
              collection:
                description: Specifies a reference to the collection to use for this
                  workload. Requires the name and namespace input to find the collection.
                  If no collection field is set, default to selecting the only workload
                  collection in the cluster, which will result in an error if not
                  exactly one collection is found.
                properties:
                  name:
                    description: Required if specifying collection.  The name of the
                      collection within a specific collection.namespace to reference.
                    type: string
                  namespace:
                    description: '(Default: "") The namespace where the collection
                      exists.  Required only if the collection is namespace scoped
                      and not cluster scoped.'
                    type: string
                required:
                - name
                type: object
            type: object
          status:
            description: GlooEdgeStatus defines the observed state of GlooEdge.
            properties:
              conditions:
                items:
                  description: PhaseCondition describes an event that has occurred
                    during a phase of the controller reconciliation loop.
                  properties:
                    lastModified:
                      description: LastModified defines the time in which this component
                        was updated.
                      type: string
                    message:
                      description: Message defines a helpful message from the phase.
                      type: string
                    phase:
                      description: Phase defines the phase in which the condition
                        was set.
                      type: string
                    state:
                      description: PhaseState defines the current state of the phase.
                      enum:
                      - Complete
                      - Reconciling
                      - Failed
                      - Pending
                      type: string
                  required:
                  - lastModified
                  - message
                  - phase
                  - state
                  type: object
                type: array
              created:
                type: boolean
              dependenciesSatisfied:
                type: boolean
              resources:
                items:
                  description: ChildResource is the resource and its condition as
                    stored on the workload custom resource's status field.
                  properties:
                    condition:
                      description: ResourceCondition defines the current condition
                        of this resource.
                      properties:
                        created:
                          description: Created defines whether this object has been
                            successfully created or not.
                          type: boolean
                        lastModified:
                          description: LastModified defines the time in which this
                            resource was updated.
                          type: string
                        message:
                          description: Message defines a helpful message from the
                            resource phase.
                          type: string
                      required:
                      - created
                      type: object
                    group:
                      description: Group defines the API Group of the resource.
                      type: string
                    kind:
                      description: Kind defines the kind of the resource.
                      type: string
                    name:
                      description: Name defines the name of the resource from the
                        metadata.name field.
                      type: string
                    namespace:
                      description: Namespace defines the namespace in which this resource
                        exists in.
                      type: string
                    version:
                      description: Version defines the API Version of the resource.
                      type: string
                  required:
                  - group
                  - kind
                  - name
                  - namespace
                  - version
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.0
  creationTimestamp: null
  name: supportservices.orchestration.support-services.nukleros.io
spec:
  group: orchestration.support-services.nukleros.io
  names:
    kind: SupportServices
    listKind: SupportServicesList
    plural: supportservices
    singular: supportservices
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: SupportServices is the Schema for the supportservices API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SupportServicesSpec defines the desired state of SupportServices.
            properties:
              defaultIngressController:
                default: kong
                description: '(Default: "kong") The default ingress for setting TLS
                  certs.  One of: kong | nginx.'
                enum:
                - kong
                - nginx
                type: string
              tier:
                default: development
                description: '(Default: "development") The tier of cluster being used.  One
                  of: development | staging | production.'
                enum:
                - development
                - staging
                - production
                type: string
            type: object
          status:
            description: SupportServicesStatus defines the observed state of SupportServices.
            properties:
              conditions:
                items:
                  description: PhaseCondition describes an event that has occurred
                    during a phase of the controller reconciliation loop.
                  properties:
                    lastModified:
                      description: LastModified defines the time in which this component
                        was updated.
                      type: string
                    message:
                      description: Message defines a helpful message from the phase.
                      type: string
                    phase:
                      description: Phase defines the phase in which the condition
                        was set.
                      type: string
                    state:
                      description: PhaseState defines the current state of the phase.
                      enum:
                      - Complete
                      - Reconciling
                      - Failed
                      - Pending
                      type: string
                  required:
                  - lastModified
                  - message
                  - phase
                  - state
                  type: object
                type: array
              created:
                type: boolean
              dependenciesSatisfied:
                type: boolean
              resources:
                items:
                  description: ChildResource is the resource and its condition as
                    stored on the workload custom resource's status field.
                  properties:
                    condition:
                      description: ResourceCondition defines the current condition
                        of this resource.
                      properties:
                        created:
                          description: Created defines whether this object has been
                            successfully created or not.
                          type: boolean
                        lastModified:
                          description: LastModified defines the time in which this
                            resource was updated.
                          type: string
                        message:
                          description: Message defines a helpful message from the
                            resource phase.
                          type: string
                      required:
                      - created
                      type: object
                    group:
                      description: Group defines the API Group of the resource.
                      type: string
                    kind:
                      description: Kind defines the kind of the resource.
                      type: string
                    name:
                      description: Name defines the name of the resource from the
                        metadata.name field.
                      type: string
                    namespace:
                      description: Namespace defines the namespace in which this resource
                        exists in.
                      type: string
                    version:
                      description: Version defines the API Version of the resource.
                      type: string
                  required:
                  - group
                  - kind
                  - name
                  - namespace
                  - version
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kuberentes.io/instance: controller-manager
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: support-services-operator
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: support-services-operator
  name: support-services-operator-controller-manager
  namespace: support-services-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: support-services-operator
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: support-services-operator
  name: support-services-operator-leader-election-role
  namespace: support-services-operator-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: support-services-operator-manager-role
rules:
- apiGroups:
  - acme.cert-manager.io
  resources:
  - challenges
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - acme.cert-manager.io
  resources:
  - challenges/finalizers
  verbs:
  - update
- apiGroups:
  - acme.cert-manager.io
  resources:
  - challenges/status
  verbs:
  - patch
  - update
- apiGroups:
  - acme.cert-manager.io
  resources:
  - orders
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - acme.cert-manager.io
  resources:
  - orders/finalizers
  verbs:
  - update
- apiGroups:
  - acme.cert-manager.io
  resources:
  - orders/status
  verbs:
  - patch
  - update
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apiregistration.k8s.io
  resources:
  - apiservices
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
- apiGroups:
  - cert-manager.io
  resources:
  - certificaterequests
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cert-manager.io
  resources:
  - certificaterequests/finalizers
  verbs:
  - update
- apiGroups:
  - cert-manager.io
  resources:
  - certificaterequests/status
  verbs:
  - patch
  - update
- apiGroups:
  - cert-manager.io
  resources:
  - certificates
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cert-manager.io
  resources:
  - certificates/finalizers
  verbs:
  - update
- apiGroups:
  - cert-manager.io
  resources:
  - certificates/status
  verbs:
  - patch
  - update
- apiGroups:
  - cert-manager.io
  resources:
  - clusterissuers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cert-manager.io
  resources:
  - clusterissuers/status
  verbs:
  - patch
  - update
- apiGroups:
  - cert-manager.io
  resources:
  - issuers
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cert-manager.io
  resources:
  - issuers/status
  verbs:
  - patch
  - update
- apiGroups:
  - cert-manager.io
  resources:
  - signers
  verbs:
  - approve
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/status
  verbs:
  - patch
  - update
- apiGroups:
  - certificates.k8s.io
  resources:
  - signers
  verbs:
  - sign
- apiGroups:
  - certificates.support-services.nukleros.io
  resources:
  - certmanagers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - certificates.support-services.nukleros.io
  resources:
  - certmanagers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - '*'
  - create
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - '*'
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - enterprise.gloo.solo.io
  resources:
  - authconfigs
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways/finalizers
  verbs:
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - httproutes
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - httproutes/finalizers
  verbs:
  - update
- apiGroups:
  - gateway.solo.io
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
- apiGroups:
  - gateway.solo.io
  resources:
  - gateways
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - gateway.solo.io
  resources:
  - httpgateways
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - gateway.solo.io
  resources:
  - routeoptions
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - gateway.solo.io
  resources:
  - routetables
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - gateway.solo.io
  resources:
  - tcpgateways
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - gateway.solo.io
  resources:
  - virtualhostoptions
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - gateway.solo.io
  resources:
  - virtualservices
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - gateway.support-services.nukleros.io
  resources:
  - externaldns
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - gateway.support-services.nukleros.io
  resources:
  - externaldns/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - gateway.support-services.nukleros.io
  resources:
  - glooedges
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - gateway.support-services.nukleros.io
  resources:
  - glooedges/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - gloo.solo.io
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
- apiGroups:
  - gloo.solo.io
  resources:
  - proxies
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - gloo.solo.io
  resources:
  - settings
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - gloo.solo.io
  resources:
  - upstreamgroups
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - gloo.solo.io
  resources:
  - upstreams
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - graphql.gloo.solo.io
  resources:
  - graphqlapis
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - graphql.gloo.solo.io
  resources:
  - graphqlapis/status
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/finalizers
  verbs:
  - update
- apiGroups:
  - orchestration.support-services.nukleros.io
  resources:
  - supportservices
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - orchestration.support-services.nukleros.io
  resources:
  - supportservices/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ratelimit.solo.io
  resources:
  - ratelimitconfigs
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ratelimit.solo.io
  resources:
  - ratelimitconfigs/status
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterroles
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - route.openshift.io
  resources:
  - routes/custom-host
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: support-services-operator
    app.kubernetes.io/instance: metrics-reader
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: support-services-operator
  name: support-services-operator-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: support-services-operator
    app.kubernetes.io/instance: proxy-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: support-services-operator
  name: support-services-operator-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: support-services-operator
    app.kubernetes.io/instance: leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: support-services-operator
  name: support-services-operator-leader-election-rolebinding
  namespace: support-services-operator-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: support-services-operator-leader-election-role
subjects:
- kind: ServiceAccount
  name: support-services-operator-controller-manager
  namespace: support-services-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: support-services-operator
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: support-services-operator
  name: support-services-operator-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: support-services-operator-manager-role
subjects:
- kind: ServiceAccount
  name: support-services-operator-controller-manager
  namespace: support-services-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: support-services-operator
    app.kubernetes.io/instance: proxy-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: support-services-operator
  name: support-services-operator-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: support-services-operator-proxy-role
subjects:
- kind: ServiceAccount
  name: support-services-operator-controller-manager
  namespace: support-services-operator-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: support-services-operator
    app.kubernetes.io/instance: controller-manager-metrics-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: support-services-operator
    control-plane: controller-manager
  name: support-services-operator-controller-manager-metrics-service
  namespace: support-services-operator-system
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: support-services-operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: support-services-operator
    control-plane: controller-manager
  name: support-services-operator-controller-manager
  namespace: support-services-operator-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
                - ppc64le
                - s390x
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        image: controller:latest
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      securityContext:
        runAsNonRoot: true
      serviceAccountName: support-services-operator-controller-manager
      terminationGracePeriodSeconds: 10
